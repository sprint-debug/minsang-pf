{"ast":null,"code":"import _toConsumableArray from \"/Users/minsang/Desktop/develop/2023Fe/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nvar _jsxFileName = \"/Users/minsang/Desktop/develop/2023Fe/portfolio/src/Components/Polygon/Polygon.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Polygon = function Polygon(_ref) {\n  _s();\n  var _ref$backgroundColor = _ref.backgroundColor,\n    backgroundColor = _ref$backgroundColor === void 0 ? 0x000000 : _ref$backgroundColor,\n    _ref$lineColor = _ref.lineColor,\n    lineColor = _ref$lineColor === void 0 ? 0x79809e : _ref$lineColor;\n  var heroSectionRef = useRef(null);\n  useEffect(function () {\n    var scene = new THREE.Scene();\n    scene.background = new THREE.Color(backgroundColor);\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer();\n    var handleResize = function handleResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(heroSectionRef.current.offsetWidth, heroSectionRef.current.offsetHeight);\n    };\n    heroSectionRef.current.appendChild(renderer.domElement);\n    var faceMaterial = new THREE.MeshBasicMaterial({\n      color: 0xffffff,\n      side: THREE.DoubleSide\n    });\n    var wireframeMaterial = new THREE.MeshBasicMaterial({\n      color: lineColor,\n      wireframe: true\n    });\n    var vwToPixels = function vwToPixels(value) {\n      return window.innerWidth * (value / 100);\n    };\n\n    // 캔버스의 너비에 대한 백분율 값을 픽셀 값으로 변환하는 함수\n    var percentToPixelsWidth = function percentToPixelsWidth(value) {\n      return heroSectionRef.current.offsetWidth * (value / 100);\n    };\n\n    // 캔버스의 높이에 대한 백분율 값을 픽셀 값으로 변환하는 함수\n    var percentToPixelsHeight = function percentToPixelsHeight(value) {\n      return heroSectionRef.current.offsetHeight * (value / 100);\n    };\n    var pyramids = [{\n      geometry: new THREE.ConeGeometry(vwToPixels(2.5), vwToPixels(4.5), 4),\n      position: [percentToPixelsWidth(10),\n      // left 10%\n      -percentToPixelsHeight(10),\n\n        // bottom 10%\n      , 0],\n      rotation: {\n        x: Math.PI / 4,\n        y: 0,\n        z: 0\n      }\n    }, {\n      geometry: new THREE.ConeGeometry(vwToPixels(3.5), vwToPixels(5), 4),\n      position: [percentToPixelsWidth(10), percentToPixelsWidth(-3), 0],\n      rotation: {\n        x: Math.PI / 4,\n        y: 0,\n        z: 0\n      }\n    }];\n    pyramids.forEach(function (pyramidConfig) {\n      var _pyramidFace$position, _pyramidWireframe$pos;\n      var pyramidFace = new THREE.Mesh(pyramidConfig.geometry, faceMaterial);\n      (_pyramidFace$position = pyramidFace.position).set.apply(_pyramidFace$position, _toConsumableArray(pyramidConfig.position));\n      scene.add(pyramidFace);\n      var pyramidWireframe = new THREE.Mesh(pyramidConfig.geometry, wireframeMaterial);\n      (_pyramidWireframe$pos = pyramidWireframe.position).set.apply(_pyramidWireframe$pos, _toConsumableArray(pyramidConfig.position));\n      pyramidWireframe.position.set(pyramidConfig.position[0], pyramidConfig.position[1], pyramidConfig.position[2] + 0.01); // z 위치를 약간 앞으로 이동\n      scene.add(pyramidWireframe);\n    });\n    var dodecahedronGeometry = new THREE.DodecahedronGeometry(30);\n    var dodecahedronFace = new THREE.Mesh(dodecahedronGeometry, faceMaterial);\n    dodecahedronFace.position.set(0, 0, 0);\n    scene.add(dodecahedronFace);\n    var dodecahedronWireframe = new THREE.Mesh(dodecahedronGeometry, wireframeMaterial);\n    // dodecahedronWireframe.position.set(0, 0, 0.01); // z 위치를 약간 앞으로 이동\n    dodecahedronWireframe.position.set(0, 0, 10); // z 위치를 약간 앞으로 이동\n    scene.add(dodecahedronWireframe);\n    camera.position.z = 100;\n    var animate = function animate() {\n      requestAnimationFrame(animate);\n      dodecahedronFace.rotation.z += 0.001;\n      dodecahedronFace.rotation.y += 0.0025;\n      dodecahedronWireframe.rotation.z += 0.001;\n      dodecahedronWireframe.rotation.y += 0.0025;\n\n      // dodecahedronFace.rotation.z += 0.1;\n      // dodecahedronFace.rotation.y += 0.25;\n      // dodecahedronWireframe.rotation.z += 0.1;\n      // dodecahedronWireframe.rotation.y += 0.25;\n\n      renderer.render(scene, camera);\n    };\n    animate();\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return function () {\n      renderer.dispose();\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [backgroundColor, lineColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-container\",\n    ref: heroSectionRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 10\n  }, _this);\n};\n_s(Polygon, \"Q50s0wucT2xOCmHnLe78ngxh0zU=\");\n_c = Polygon;\nexport default Polygon;\nvar _c;\n$RefreshReg$(_c, \"Polygon\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","Polygon","_ref","_s","_ref$backgroundColor","backgroundColor","_ref$lineColor","lineColor","heroSectionRef","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","handleResize","aspect","updateProjectionMatrix","setSize","current","offsetWidth","offsetHeight","appendChild","domElement","faceMaterial","MeshBasicMaterial","color","side","DoubleSide","wireframeMaterial","wireframe","vwToPixels","value","percentToPixelsWidth","percentToPixelsHeight","pyramids","geometry","ConeGeometry","position","rotation","x","Math","PI","y","z","forEach","pyramidConfig","_pyramidFace$position","_pyramidWireframe$pos","pyramidFace","Mesh","set","apply","_toConsumableArray","add","pyramidWireframe","dodecahedronGeometry","DodecahedronGeometry","dodecahedronFace","dodecahedronWireframe","animate","requestAnimationFrame","render","addEventListener","dispose","removeEventListener","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_this","_c","$RefreshReg$"],"sources":["/Users/minsang/Desktop/develop/2023Fe/portfolio/src/Components/Polygon/Polygon.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nconst Polygon = ({ backgroundColor = 0x000000, lineColor = 0x79809e }) => {\r\n  const heroSectionRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(backgroundColor);\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    const renderer = new THREE.WebGLRenderer();\r\n\r\n    const handleResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(\r\n        heroSectionRef.current.offsetWidth,\r\n        heroSectionRef.current.offsetHeight\r\n      );\r\n    };\r\n    heroSectionRef.current.appendChild(renderer.domElement);\r\n\r\n    const faceMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n      side: THREE.DoubleSide,\r\n    });\r\n\r\n    const wireframeMaterial = new THREE.MeshBasicMaterial({\r\n      color: lineColor,\r\n      wireframe: true,\r\n    });\r\n\r\n    const vwToPixels = (value) => window.innerWidth * (value / 100);\r\n\r\n    // 캔버스의 너비에 대한 백분율 값을 픽셀 값으로 변환하는 함수\r\n    const percentToPixelsWidth = (value) =>\r\n      heroSectionRef.current.offsetWidth * (value / 100);\r\n\r\n    // 캔버스의 높이에 대한 백분율 값을 픽셀 값으로 변환하는 함수\r\n    const percentToPixelsHeight = (value) =>\r\n      heroSectionRef.current.offsetHeight * (value / 100);\r\n\r\n    const pyramids = [\r\n      {\r\n        geometry: new THREE.ConeGeometry(vwToPixels(2.5), vwToPixels(4.5), 4),\r\n        position: [\r\n          percentToPixelsWidth(10), // left 10%\r\n          -percentToPixelsHeight(10), // bottom 10%\r\n          ,\r\n          0,\r\n        ],\r\n        rotation: { x: Math.PI / 4, y: 0, z: 0 },\r\n      },\r\n      {\r\n        geometry: new THREE.ConeGeometry(vwToPixels(3.5), vwToPixels(5), 4),\r\n        position: [percentToPixelsWidth(10), percentToPixelsWidth(-3), 0],\r\n        rotation: { x: Math.PI / 4, y: 0, z: 0 },\r\n      },\r\n    ];\r\n\r\n    pyramids.forEach((pyramidConfig) => {\r\n      const pyramidFace = new THREE.Mesh(pyramidConfig.geometry, faceMaterial);\r\n      pyramidFace.position.set(...pyramidConfig.position);\r\n      scene.add(pyramidFace);\r\n\r\n      const pyramidWireframe = new THREE.Mesh(\r\n        pyramidConfig.geometry,\r\n        wireframeMaterial\r\n      );\r\n      pyramidWireframe.position.set(...pyramidConfig.position);\r\n      pyramidWireframe.position.set(\r\n        pyramidConfig.position[0],\r\n        pyramidConfig.position[1],\r\n        pyramidConfig.position[2] + 0.01\r\n      ); // z 위치를 약간 앞으로 이동\r\n      scene.add(pyramidWireframe);\r\n    });\r\n\r\n    const dodecahedronGeometry = new THREE.DodecahedronGeometry(30);\r\n\r\n    const dodecahedronFace = new THREE.Mesh(dodecahedronGeometry, faceMaterial);\r\n    dodecahedronFace.position.set(0, 0, 0);\r\n    scene.add(dodecahedronFace);\r\n\r\n    const dodecahedronWireframe = new THREE.Mesh(\r\n      dodecahedronGeometry,\r\n      wireframeMaterial\r\n    );\r\n    // dodecahedronWireframe.position.set(0, 0, 0.01); // z 위치를 약간 앞으로 이동\r\n    dodecahedronWireframe.position.set(0, 0, 10); // z 위치를 약간 앞으로 이동\r\n    scene.add(dodecahedronWireframe);\r\n    camera.position.z = 100;\r\n\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      dodecahedronFace.rotation.z += 0.001;\r\n      dodecahedronFace.rotation.y += 0.0025;\r\n      dodecahedronWireframe.rotation.z += 0.001;\r\n      dodecahedronWireframe.rotation.y += 0.0025;\r\n\r\n      // dodecahedronFace.rotation.z += 0.1;\r\n      // dodecahedronFace.rotation.y += 0.25;\r\n      // dodecahedronWireframe.rotation.z += 0.1;\r\n      // dodecahedronWireframe.rotation.y += 0.25;\r\n\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    animate();\r\n    handleResize();\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      renderer.dispose();\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, [backgroundColor, lineColor]);\r\n\r\n  return <div className=\"canvas-container\" ref={heroSectionRef}></div>;\r\n};\r\n\r\nexport default Polygon;\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAAC,IAAA,EAA6D;EAAAC,EAAA;EAAA,IAAAC,oBAAA,GAAAF,IAAA,CAAvDG,eAAe;IAAfA,eAAe,GAAAD,oBAAA,cAAG,QAAQ,GAAAA,oBAAA;IAAAE,cAAA,GAAAJ,IAAA,CAAEK,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,QAAQ,GAAAA,cAAA;EACjE,IAAME,cAAc,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAEnCC,SAAS,CAAC,YAAM;IACd,IAAMY,KAAK,GAAG,IAAIX,KAAK,CAACY,KAAK,CAAC,CAAC;IAC/BD,KAAK,CAACE,UAAU,GAAG,IAAIb,KAAK,CAACc,KAAK,CAACP,eAAe,CAAC;IACnD,IAAMQ,MAAM,GAAG,IAAIf,KAAK,CAACgB,iBAAiB,CACxC,EAAE,EACFC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EACtC,GAAG,EACH,IACF,CAAC;IACD,IAAMC,QAAQ,GAAG,IAAIpB,KAAK,CAACqB,aAAa,CAAC,CAAC;IAE1C,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;MACzBP,MAAM,CAACQ,MAAM,GAAGN,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;MACtDJ,MAAM,CAACS,sBAAsB,CAAC,CAAC;MAC/BJ,QAAQ,CAACK,OAAO,CACdf,cAAc,CAACgB,OAAO,CAACC,WAAW,EAClCjB,cAAc,CAACgB,OAAO,CAACE,YACzB,CAAC;IACH,CAAC;IACDlB,cAAc,CAACgB,OAAO,CAACG,WAAW,CAACT,QAAQ,CAACU,UAAU,CAAC;IAEvD,IAAMC,YAAY,GAAG,IAAI/B,KAAK,CAACgC,iBAAiB,CAAC;MAC/CC,KAAK,EAAE,QAAQ;MACfC,IAAI,EAAElC,KAAK,CAACmC;IACd,CAAC,CAAC;IAEF,IAAMC,iBAAiB,GAAG,IAAIpC,KAAK,CAACgC,iBAAiB,CAAC;MACpDC,KAAK,EAAExB,SAAS;MAChB4B,SAAS,EAAE;IACb,CAAC,CAAC;IAEF,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,KAAK;MAAA,OAAKtB,MAAM,CAACC,UAAU,IAAIqB,KAAK,GAAG,GAAG,CAAC;IAAA;;IAE/D;IACA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAID,KAAK;MAAA,OACjC7B,cAAc,CAACgB,OAAO,CAACC,WAAW,IAAIY,KAAK,GAAG,GAAG,CAAC;IAAA;;IAEpD;IACA,IAAME,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIF,KAAK;MAAA,OAClC7B,cAAc,CAACgB,OAAO,CAACE,YAAY,IAAIW,KAAK,GAAG,GAAG,CAAC;IAAA;IAErD,IAAMG,QAAQ,GAAG,CACf;MACEC,QAAQ,EAAE,IAAI3C,KAAK,CAAC4C,YAAY,CAACN,UAAU,CAAC,GAAG,CAAC,EAAEA,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;MACrEO,QAAQ,EAAE,CACRL,oBAAoB,CAAC,EAAE,CAAC;MAAE;MAC1B,CAACC,qBAAqB,CAAC,EAAE,CAAC;;QAAE;MAAA,EAE5B,CAAC,CACF;MACDK,QAAQ,EAAE;QAAEC,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAG,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE;IACzC,CAAC,EACD;MACER,QAAQ,EAAE,IAAI3C,KAAK,CAAC4C,YAAY,CAACN,UAAU,CAAC,GAAG,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MACnEO,QAAQ,EAAE,CAACL,oBAAoB,CAAC,EAAE,CAAC,EAAEA,oBAAoB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MACjEM,QAAQ,EAAE;QAAEC,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAG,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE;IACzC,CAAC,CACF;IAEDT,QAAQ,CAACU,OAAO,CAAC,UAACC,aAAa,EAAK;MAAA,IAAAC,qBAAA,EAAAC,qBAAA;MAClC,IAAMC,WAAW,GAAG,IAAIxD,KAAK,CAACyD,IAAI,CAACJ,aAAa,CAACV,QAAQ,EAAEZ,YAAY,CAAC;MACxE,CAAAuB,qBAAA,GAAAE,WAAW,CAACX,QAAQ,EAACa,GAAG,CAAAC,KAAA,CAAAL,qBAAA,EAAAM,kBAAA,CAAIP,aAAa,CAACR,QAAQ,EAAC;MACnDlC,KAAK,CAACkD,GAAG,CAACL,WAAW,CAAC;MAEtB,IAAMM,gBAAgB,GAAG,IAAI9D,KAAK,CAACyD,IAAI,CACrCJ,aAAa,CAACV,QAAQ,EACtBP,iBACF,CAAC;MACD,CAAAmB,qBAAA,GAAAO,gBAAgB,CAACjB,QAAQ,EAACa,GAAG,CAAAC,KAAA,CAAAJ,qBAAA,EAAAK,kBAAA,CAAIP,aAAa,CAACR,QAAQ,EAAC;MACxDiB,gBAAgB,CAACjB,QAAQ,CAACa,GAAG,CAC3BL,aAAa,CAACR,QAAQ,CAAC,CAAC,CAAC,EACzBQ,aAAa,CAACR,QAAQ,CAAC,CAAC,CAAC,EACzBQ,aAAa,CAACR,QAAQ,CAAC,CAAC,CAAC,GAAG,IAC9B,CAAC,CAAC,CAAC;MACHlC,KAAK,CAACkD,GAAG,CAACC,gBAAgB,CAAC;IAC7B,CAAC,CAAC;IAEF,IAAMC,oBAAoB,GAAG,IAAI/D,KAAK,CAACgE,oBAAoB,CAAC,EAAE,CAAC;IAE/D,IAAMC,gBAAgB,GAAG,IAAIjE,KAAK,CAACyD,IAAI,CAACM,oBAAoB,EAAEhC,YAAY,CAAC;IAC3EkC,gBAAgB,CAACpB,QAAQ,CAACa,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACtC/C,KAAK,CAACkD,GAAG,CAACI,gBAAgB,CAAC;IAE3B,IAAMC,qBAAqB,GAAG,IAAIlE,KAAK,CAACyD,IAAI,CAC1CM,oBAAoB,EACpB3B,iBACF,CAAC;IACD;IACA8B,qBAAqB,CAACrB,QAAQ,CAACa,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC9C/C,KAAK,CAACkD,GAAG,CAACK,qBAAqB,CAAC;IAChCnD,MAAM,CAAC8B,QAAQ,CAACM,CAAC,GAAG,GAAG;IAEvB,IAAMgB,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAS;MACpBC,qBAAqB,CAACD,OAAO,CAAC;MAC9BF,gBAAgB,CAACnB,QAAQ,CAACK,CAAC,IAAI,KAAK;MACpCc,gBAAgB,CAACnB,QAAQ,CAACI,CAAC,IAAI,MAAM;MACrCgB,qBAAqB,CAACpB,QAAQ,CAACK,CAAC,IAAI,KAAK;MACzCe,qBAAqB,CAACpB,QAAQ,CAACI,CAAC,IAAI,MAAM;;MAE1C;MACA;MACA;MACA;;MAEA9B,QAAQ,CAACiD,MAAM,CAAC1D,KAAK,EAAEI,MAAM,CAAC;IAChC,CAAC;IAEDoD,OAAO,CAAC,CAAC;IACT7C,YAAY,CAAC,CAAC;IACdL,MAAM,CAACqD,gBAAgB,CAAC,QAAQ,EAAEhD,YAAY,CAAC;IAE/C,OAAO,YAAM;MACXF,QAAQ,CAACmD,OAAO,CAAC,CAAC;MAClBtD,MAAM,CAACuD,mBAAmB,CAAC,QAAQ,EAAElD,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,CAACf,eAAe,EAAEE,SAAS,CAAC,CAAC;EAEhC,oBAAOP,OAAA;IAAKuE,SAAS,EAAC,kBAAkB;IAACC,GAAG,EAAEhE;EAAe;IAAAiE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KAAM,CAAC;AACtE,CAAC;AAAC1E,EAAA,CAzHIF,OAAO;AAAA6E,EAAA,GAAP7E,OAAO;AA2Hb,eAAeA,OAAO;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}